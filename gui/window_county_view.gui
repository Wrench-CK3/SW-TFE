######################################################
################### COUNTY VIEW ######################
######################################################

window = {
	name = "holding_view"
	widgetid = "holding_view_id"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	size = { 800 781 }
	datacontext = "[HoldingView.GetHolding]"
	datacontext = "[HoldingView.GetProvince]"
	datacontext = "[Province.GetCounty]"
	window_assign_excavation_leader = {}

	# County window background
	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 18 }
		margin = { -23 -17 }
		margin_left = 20
		margin_bottom = 20
		texture_density = 2
		
		modify_texture = {
			name = "overlay"
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	# County window states
	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		
		# DEMD
		on_start = "[GetVariableSystem.Toggle( 'demd_county_view' )]" # this opens the window
		on_start = "[GetVariableSystem.Set( 'demd_county_view', 'overview_tab' )]" # this set the default tab
		onclick = "[GetVariableSystem.Clear( 'window_assign_excavation_leader' )]" # closes excavation leader selection window

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position = { -60 60 }
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}


	vbox = {
		name = "window_content"
		margin_right = 35
		margin_top = 30

		# header
		hbox = {
			name = "county_header"
			layoutpolicy_horizontal = expanding
			margin_right = 15
			margin_left = 5
			margin_top = 5
			margin_bottom = 5
			spacing = 2

			background = {
				using = Background_Area_Dark
				margin_left = 5
			}

			coa_title_small = {
				datacontext = "[HoldingView.GetCountyTitle]"
			}
			
			# County title
			vbox = {
				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingView.GetCountyTitle.GetNameNoTooltip]"
						margin_bottom = 4
						using = Font_Size_Big
						font = TitleFont
						max_width = 390
						fontsize_min = 16
					}

					button_edit_text = {
						visible = "[HoldingView.GetCountyTitle.CanPlayerRenameTitle]"
						onclick = "[OpenTitleRenamePopup(HoldingView.GetCountyTitle)]"
						tooltip = "EDIT_TITLE_NAME"
					}
				}

				vbox = {
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "your_county"
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_YOUR_COUNTY"
						margin_left = 2
						margin_bottom = 4
						using = Font_Size_Small
					}

					text_single = {
						name = "top_realm_county"
						visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_TOP_REALM_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}

					text_single = {
						name = "foreign_county"
						visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_FOREIGN_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}
				}
			}

			expand = {}

			### SIEGE AND RAID GOTO BUTTON ###
			button_group = {
				name = "open_siege_button"
				datacontext = "[HoldingView.GetProvince.GetSiege]"
				visible = "[HoldingView.GetProvince.HasActiveSiege]"
				onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
				tooltip = "[Siege.GetSiegeDescription]"
				using = tooltip_se
				shortcut = county_go_to_siege
				using = siege_goto_template
			}

			button_group = {
				name = "open_raid_button"
				datacontext = "[HoldingView.GetProvince.GetRaid]"
				visible = "[HoldingView.GetProvince.HasActiveRaid]"
				onclick = "[DefaultOnRaidClick( Raid.Self )]"
				tooltip = "MAP_RAID_TOOLTIP"
				shortcut = county_go_to_siege
				using = tooltip_se
				using = raid_goto_template
				blockoverride "tooltip" {}
			}

			buttons_window_control = {

				blockoverride "button_go_to"
				{
					tooltip = "GOTO_PROVINCE_TT"
					using = tooltip_ne
					onclick = "[HoldingView.PanToCountyCapital]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_close"
				{
					onclick = "[HoldingView.Close]"
				}
			}
		}

		####################################
		########### COUNTY INFO ############
		####################################

		# De jure hierarchy
		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 2 }
			spacing = 10

			hbox = {
				datamodel = "[HoldingView.GetDeJureLieges]"

				item = {

					coa_title_tiny_crown = {
						visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"
						using = tooltip_se
					}
				}
			}

			text_single = {
				text = "DE_JURE_HIERARCHY"
				default_format = "#low"
			}

			expand = {}

			hbox = {
				name = "county_modifiers_grid"
				datamodel = "[HoldingView.GetCountyModifiers]"
				margin_right = 15

				item = {

					icon = {
						size = { 40 40 }
						texture = "[ModifierItem.GetIcon]"
						using = tooltip_ne
						tooltip = "[ModifierItem.GetTooltip]"
					}
				}
			}

			hbox = {
				layoutpolicy_vertical = expanding
				visible = [County.IsFullyOccupied]
				datacontext = [County.GetCountyOccupant]

				widget = {
					size = { 52 52 }

					icon = {
						size = { 70 70 }
						name = "war_icon"
						texture = "gfx/interface/icons/war_status/war_icon.dds"
						parentanchor = center
					}

					coa_realm_small = {
						position = { 1 0 }
						blockoverride "coa_button" {
							tooltip = "COUNTY_OCCUPIER_TOOLTIP"
							onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
							onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
							button_ignore = none
							tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
						}
					}
				}
			}
		}

		hbox = {
			name = "county_info"
			datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
				margin_bottom = -2
			}

			# Holder info
			hbox = {
				name = "holder_info"
				datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
				visible = "[HoldingView.GetProvince.HasCountyCapitalProvince]"
				layoutpolicy_horizontal = expanding
				margin = { 5 5 }
				margin_right = 15

				background = {
					name = "Held_directly_by_me"
					visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Green
					alpha = 0.25

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				background = {
					name = "Held_by_someone_below_me"
					visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Blue
					alpha = 0.25

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				background = {
					name = "Held_under_my_Top_Liege,_but_Not_Me"
					visible = "[And(And(Not( ObjectsEqual( Character.Self, GetPlayer )),Not(Character.IsOtherLiegeOrAbove( GetPlayer ))),ObjectsEqual( Character.GetTopLiege, GetPlayer.GetTopLiege ))]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Bright_Yellow
					alpha = 0.25

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				#####

				## Holder
				portrait_head = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 6

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 10
						margin_bottom = 10

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_COUNTY_HOLDER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
								layoutpolicy_horizontal = expanding
								max_width = 190
								text = "[Character.GetRelationToString( GetPlayer )]"
								autoresize = yes
							}
						}

						text_multi = {
							datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
							layoutpolicy_horizontal = expanding
							max_width = 190
							text = "[Character.GetShortUINameNoTooltip|U]"
							default_format = "#high"
							autoresize = yes
						}
					}

					expand = {}
				}
			}

			# County stats
			vbox = {
				name = "county_stats"
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				margin_right = 15
				min_width = 260
				
				# Popular Opinion
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[county_opinion|E]:"
					}

					button_normal = {
						name = "in_faction"
						visible = "[HoldingView.IsInFaction]"
						onclick = "[HoldingView.OnGotoFaction]"
						tooltip = "COUNTY_IN_FACTION_TOOLTIP"
						size = { 20 20 }
						texture = "gfx/interface/icons/symbols/icon_warning.dds"
					}

					text_single = {
						text = "[HoldingView.GetCountyOpinion|=+]"
						default_format = "#high"
						tooltip = "COUNTY_OPINION_TOOLTIP"
					}
				}
				
				# Population
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[demd_population|E]:"
					}


					text_single = {
						text = "[Province.GetCounty.GetTitle.MakeScope.ScriptValue('county_population')|1]k"
						default_format = "#high"
						tooltip = DEMD_WHOLE_COUNTY_POP_STATS
					}
				}

				# Control
				hbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[HoldingView.GetProvince.GetCounty]";

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[control|E]:"
					}
					flowcontainer = {
						background = {
							visible = "[LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100')]"
							margin = { 5 0 }
							using = Status_Bad
						}
						text_single = {
							text = "[County.GetControlLevel]"
							default_format = "#high"
							tooltip = "COUNTY_CONTROL_TOOLTIP"
						}
					}
				}
				
				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[development|E]:"
					}

					text_single = {
						text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString]"
						default_format = "#high"
						tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
					}
				}

				# Culture
				hbox = {
					datacontext = "[Province.GetCounty.GetCulture]"
					layoutpolicy_horizontal = expanding
					spacing = 2

					using = tooltip_ne

					tooltipwidget = {

						culture_tooltip = {

							blockoverride "extra_info"
							{
								text_single = {
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
									text = "COUNTY_NOT_YOUR_CULTURE"
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[culture|E]:"
					}

					button_group = {
						# shortcut = "innovations_window"
						onclick = "[DefaultOnCultureClick(Culture.GetID)]"

						text_single = {
							text = "CULTURE_COUNTY_WINDOW"
							default_format = "#high"

							background = {
								visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}

				# Faith
				hbox = {
					datacontext = "[Province.GetCounty.GetFaith]"
					layoutpolicy_horizontal = expanding
					spacing = 2
					using = tooltip_ne

					tooltipwidget = {

						faith_tooltip = {

							blockoverride "extra_info" {
								using = faith_tooltip_click_default_extra_info

								text_single = {
									margin = { 10 0 }
									layoutpolicy_horizontal = expanding
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
									text = "COUNTY_NOT_YOUR_FAITH"
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[faith|E]:"
					}

					icon = {
						size = { 22 22 }
						datacontext = "[Province.GetCounty.GetFaith]"
						texture = "[Faith.GetIcon]"
					}

					button_group = {
						# shortcut = "faith_window"
						onclick = "[DefaultOnFaithClick(Faith.GetID)]"

						text_single = {
							text = "[Faith.GetNameNoTooltip]"
							default_format = "#high"

							background = {
								visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}
			}
		}

		divider = {
			layoutpolicy_horizontal = expanding
		}
		
		# Tabs menu
		hbox = {
			layoutpolicy_horizontal = expanding
			
			hbox = {	
				hbox = {
					margin_left = 5
					spacing = 5
					datamodel = "[HoldingView.GetCountyHoldings]"

					item = {
						button_tab_dark = {
							datacontext = "[GUICountyHolding.GetHolding]"
							size = { 50 50  }
							down = "[And(GUICountyHolding.IsSelected,GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' ))]"
							alwaystransparent = "[And(GUICountyHolding.IsSelected,GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' ))]"
							onclick = "[GUICountyHolding.OnClick]"
							onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"
							onclick = "[GetVariableSystem.Set( 'demd_county_view', 'overview_tab' )]"
							using = tooltip_ne
							tooltipwidget = { holding_tooltip_click = {} }

							icon_building_tab = {
								parentanchor = center
								position = { 0 1 }
								size = { 35 30 }
								alwaystransparent = yes
								down = "[And(GUICountyHolding.IsSelected,GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' ))]"
								texture = "[GUICountyHolding.GetHolding.GetType.GetTabIcon]"

								blockoverride "button_frames"
								{
									gfxtype = togglepushbuttongfx
									effectname = "NoHighlight"
									upframe = 4
									uphoverframe = 5
									uppressedframe = 6
									downframe = 5
								}
							}

							icon = {
								name = "realm_capital_icon"
								visible = "[GUICountyHolding.GetHolding.GetProvince.GetTitle.IsCountyCapital]"
								parentanchor = bottom|right
								size = { 32 32 }
								position = { 4 0 }
								framesize = { 63 63 }
								texture = "gfx/interface/icons/icon_capital.dds"
								frame = 1
							}
						}
					}
				}
				hbox = {
					margin_left = 5
					spacing = 5					

					# DEMD Edicts Tab
					button_tab_dark = {
						datacontext = "[GUICountyHolding.GetHolding]"
						size = { 100 50 }
						down = "[GetVariableSystem.HasValue( 'demd_county_view', 'law_tab' )]"
						alwaystransparent = "[GUICountyHolding.IsSelected]"
						onclick = "[GetVariableSystem.Set( 'demd_county_view', 'law_tab' )]"
						
						text_single = {
							text = "Edicts"
							default_format = "#high"
							using = Font_Size_Big
							parentanchor = hcenter|vcenter
							align = nobaseline
							position = { 0 0 }
						}				
					}
					
					# DEMD Excavation Tab
					button_tab_dark = {
						datacontext = "[GUICountyHolding.GetHolding]"
						visible = "[GetScriptedGui('show_excavation_tab').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End)]"
						size = { 100 50 }
						down = "[GetVariableSystem.HasValue( 'demd_county_view', 'excavation_tab' )]"
						alwaystransparent = "[GUICountyHolding.IsSelected]"
						onclick = "[GetVariableSystem.Set( 'demd_county_view', 'excavation_tab' )]"
						
						text_single = {
							text = "Ruins"
							default_format = "#high"
							using = Font_Size_Big
							parentanchor = hcenter|vcenter
							align = nobaseline
							position = { 0 0 }
						}				
					}



				}				
			}

			expand = {}
		}

		####################################
		########## HOLDING INFO ############
		####################################
		margin_widget = {
			
			name = "holding_info"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			minimumsize = { 0 200 }
			margin = { 10 5 }
			margin_bottom = 10
			margin_right = 15
			scissor = yes

			state = {
				name = "holding_view_refresh"
				next = a
				alpha = 0.5
			}

			state = {
				name = "a"
				alpha = 1
				duration = 0.5
				using = Animation_Curve_Default
			}

			background = {
				using = Background_Area_Dark
				margin_left = 5
				margin_top = 3
			}

			# Holding View		
			hbox = {
				parentanchor = top
				margin_top = 360
				margin_left = -5
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' )]"


			}
				
			# Holding Illustration
			background = {
				visible = "[HoldingView.HasHolding]"
				texture = "[HoldingView.GetHolding.GetIllustration]"
				alpha = 1

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.75
				}
			}
			background = {
				visible = "[Not(HoldingView.HasHolding)]"
				texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
				alpha = 1

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.75
				}
			}
			
			# Construct Holding
            button_standard_big = {
				name = "construct_holding"
				visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
				parentanchor = center
				position = { -150 0 }
				size = { 300 65 }
				text = "CREATE_NEW_HOLDING"
				onclick = "[HoldingView.OnConstructHoldingClick]"
				tooltipwidget = { 
					base_food_districts_breakdown_widget = { 
					
					} 
				}
				enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
			}
			
			# add back holding construction
			vbox = {
				name = "constructing_holding"
				visible = "[HoldingView.IsBeingConstructed]"
				parentanchor = center
				position = { -150 0 }
				spacing = 5
				expand = {}

				progressbar_standard = {
					name = "constructing_holding_progress"
					alwaystransparent = yes
					size = { 300 30 }
					value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
					direction = horizontal
					tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"

					text_single = {
						parentanchor = center
						text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
						default_format = "#high"
						align = nobaseline
						using = Font_Size_Medium
					}
				}

				button_standard_big = {
					name = "cancel_holding_construction"
					size = { 300 30 }
					text = "CANCEL_HOLDING_CONSTRUCTION"
					visible = "[HoldingView.CanCancelConstruction]"
					onclick = "[HoldingView.CancelHoldingConstruction]"
					tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
				}

				expand = {}
			}

			### TOP LEFT CoA + Your XXX Holding thing
			flowcontainer = {
				ignoreinvisible = yes
				spacing = 5
				margin = { 5 5 }
				visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' )]"

				coa_title_medium = {
					datacontext = "[HoldingView.GetTitle]"
					visible = "[HoldingView.GetTitle.HasHolder]"
				}

				
				
				# Holding info
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					margin_top = 5
										

					flowcontainer = {
						visible = "[HoldingView.GetTitle.HasHolder]"
						ignoreinvisible = yes

						text_single = {
							text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							default_format = "#high"
							align = nobaseline
							using = Font_Size_Big
							max_width = 190
							fontsize_min = 16
						}

						button_edit_text = {
							visible = "[HoldingView.GetProvince.GetTitle.CanPlayerRenameTitle]"
							parentanchor = vcenter
							size = { 25 25 }
							onclick = "[OpenTitleRenamePopup(HoldingView.GetProvince.GetTitle)]"
							tooltip = "EDIT_TITLE_NAME"
						}

						spacer = {
							size = { 3 3 }
						}

						widget = {
							size = { 32 32 }
							visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"

							icon = {
								name = "county_capital_icon"
								parentanchor = center
								size = { 40 40 }
								texture = "gfx/interface/icons/icon_capital.dds"
								framesize = { 63 63 }
								frame = 1
								tooltip = "COUNTY_CAPITAL_TOOLTIP"
							}
						}

						widget = {
							size = { 32 32 }
							visible = "[HoldingView.GetProvince.IsRealmCapital]"

							icon = {
								name = "realm_capital_icon"
								parentanchor = center
								size = { 40 40 }
								framesize = { 63 63 }
								texture = "gfx/interface/icons/icon_capital.dds"
								frame = 2
								tooltip = "REALM_CAPITAL_TOOLTIP"
							}
						}

						widget = {
							size = { 32 32 }

							button_move_capital = {
								name = "set_realm_capital_button"
								visible = "[HoldingView.PotentialSetRealmCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetRealmCapital]"
								tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
								enabled = "[HoldingView.CanSetRealmCapital]"
							}

							button_move_capital = {
								name = "set_county_capital_button"
								visible = "[HoldingView.CanSetCountyCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetCountyCapital]"
								tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
							}
						}
					}

					text_single = {
						visible = "[Not(HoldingView.GetTitle.HasHolder)]"
						text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
						default_format = "#medium"
						using = Font_Size_Big
					}

					flowcontainer = {
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						ignoreinvisible = yes

						text_label_left = {
							text = "[HoldingView.GetHoldingDesc]"
						}
					}

					text_single = {
						visible = "[HoldingView.GetProvince.IsOccupied]"
						text = "[HoldingView.GetOccupiedInfo]"
						default_format = "#high"
					}
					
				}
			}

			# Grant to button
			widget = {
				parentanchor = bottom|left
				position = { -5 -140 }
				size = { 280 150 }
				alwaystransparent = yes
				visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' )]"

				vbox = {
					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 0 }

						button_standard = {
							name = "toggle_find_vassal"
							visible = "[And( And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), Not( HoldingView.GetTitle.IsBarony ) ), Not(HoldingView.GetTitle.IsLeasedOut))]"
							text = "FIND_VASSAL_HEADER"
							onclick = "[HoldingView.ToggleFindVassalListWindow]"
							tooltip = "FIND_VASSAL_BUTTON_HOLDING_VIEW_TOOLTIP"
						}


						expand = {}
					}


				}
			}
			
			# Lessee
			hbox = {
				position = { -5 0 }
				datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
				layoutpolicy_horizontal = expanding
				ignoreinvisible = yes
				visible = "[And(GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' ),And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder))]"
				
				hbox = {
					ignoreinvisible = yes
					hbox = {
						parentanchor = top|left
						ignoreinvisible = yes
						portrait_head_small = {
							blockoverride "opinion_box" {}
						}						
					}
					vbox = {
						name = "theocracy_property"
						ignoreinvisible = yes
						datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
						layoutpolicy_horizontal = expanding
						margin_top = 0

						expand = {}



						vbox = {
							
							ignoreinvisible = yes
							text_single = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Not(Title.IsLeasedOut)]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_HOLDER"
								default_format = "#low"
							}

							text_single = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Title.IsLeasedOut]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_LESSEE"
								default_format = "#low"
							}

							text_single = {
								visible = "[Character.HasRelationTo( GetPlayer )]"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetRelationToString( GetPlayer )]"
								default_format = "#low"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[Character.GetShortUIName]"
								format_override = { high medium }
							}
						}
						
						hbox = {

							datacontext = "[HoldingView.GetTitle]"
							visible = "[Title.IsUnderTheocraticLease]"
							tooltip = "CHURCH_PROPERTY_TOOLTIP"
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes

							icon = {
								name = "church_property"
								texture = "gfx/interface/icons/icon_holding_church.dds"
								size = { 30 30 }
							}

							hbox = {
								visible = "[Title.GetHolder.IsLocalPlayer]"
								ignoreinvisible = yes

								icon = {
									name = "icon"
									size = { 28 28 }
									texture = "[Title.GetHolder.GetPietyLevelTexture]"
								}

								text_single = {
									name = "value"
									text = "[HoldingView.GetHolderModifierFromBuildingsValue('monthly_piety')|^+=]"
								}
							}

							expand = {}
						
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes
							container = {
								name = "revoke_lease_button"
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Title.IsLeasedOut]"

								button_round  = {
									datacontext = "[Title.GetLessee]"
									visible = "[And( Title.GetHolder.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"
									enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
									tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"
									oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
									clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

									button_revoke_lease = {
										parentanchor = center
										onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
									}
								}
							}
							expand = {}
						}						
					}
				}

				expand = {}
			}

			# Feudalize button
			widget = {
				allow_outside = yes
				parentanchor = center
				position = { 35 -206 }

				event_button_round  = {
                    size = { 50 50 }
					datacontext = "[HoldingView.GetGUIHoldingBuilding]"
					datacontext = "[HoldingView.GetTitle]"
					datacontext = "[HoldingView.GetHolder]"
					visible = "[And(GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' ),And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction', Title.Self) ))]"
					enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self)]"
					tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction', Title.Self)]"
					oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
					onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction', Title.Self)]"

					button_feudalize_tribe = {
						size = { 30 30 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}
			
			### BOTTOM RIGHT
			flowcontainer = {
				parentanchor = bottom|left
				spacing = 5
				direction = vertical
				visible = "[HoldingView.GetTitle.HasHolder]"

				button_standard = {
					datacontext = "[HoldingView.GetGUIHoldingBuilding]"
					parentanchor = left
					size = { 145 75 }
					allow_outside = yes
					onclick = "[GUIBuildingItem.OnClick]"
					down = "[GUIBuildingItem.IsHighlighted]"
					enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
					tooltip = "[GUIBuildingItem.GetTooltip]"

					vbox = {
						margin = { 4 1 }

						### Fort Info
						hbox = {
							visible = "[HoldingView.GetProvince.HasFort]"
							layoutpolicy_horizontal = expanding
							spacing = 10
							margin_left = 2
							margin_right = 2
							margin_top = 2

							vbox = {
								layoutpolicy_horizontal = expanding
								tooltip = "[HoldingView.GetGarrisonTooltip]"
								spacing = -4

								hbox = {
									spacing = 2

									icon = {
										name = "icon_garrison"
										texture = "gfx/interface/icons/icon_garrison.dds"
										size = { 30 30 }
									}

									text_single = {
										text = "[HoldingView.GetCurrentGarrisonSize]"
										default_format = "#high"
										align = nobaseline
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									progressbar_standard_transparent = {
										layoutpolicy_horizontal = expanding
										
										size = { 0 10 }
										value = "[HoldingView.GetGarrisonRatio]"
										direction = horizontal
									}
								}
							}

							hbox = {
								spacing = 3
								tooltip = "[Province.GetFortLevelTooltip]"

								icon = {
									name = "icon_fort"
									texture = "gfx/interface/window_siege/fort_icon.dds"
									size = { 30 25 }
								}

								text_single = {
									text = "[HoldingView.GetProvince.GetFortLevel]"
									default_format = "#high"
									align = nobaseline
								}
							}
						}

						hbox = {
							spacing = 2
							margin_bottom = 2

							text_single = {
								text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
								align = nobaseline
							}

							text_single = {
								visible = "[GUIBuildingItem.HasLevel]"
								text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
								size = { 15 20 }
								margin = { 5 0 }
								margin_bottom = 3
								fontsize = 15
								default_format = "#low;bold"
								align = center;nobaseline

								background = {
									using = Background_Area_Dark
								}

								background = {
									using = Background_Area_Dark
								}

								background = {
									using = Background_Area_Dark
								}
							}

							icon = {
								name = "wrong_type"
								datacontext = "[HoldingView.GetHolder]"
								visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
							}

							icon = {
								name = "reduced_by_fixable_situation"
								visible = "[GUIBuildingItem.IsBuildingDisabled]"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
							}
						}

						progressbar_standard = {
							name = "holding_upgrade_progressbar"
							layoutpolicy_horizontal = expanding
							visible = "[GUIBuildingItem.IsConstructing]"
							size = { 0 10 }
							alwaystransparent = yes
							value = "[GUIBuildingItem.GetConstructingProgress]"
							tooltip = "[GUIBuildingItem.GetTooltip]"
						}
					}
				}

				flowcontainer = {
					name = "buildings_grid_special"
					parentanchor = right
					ignoreinvisible = yes
					margin_right = -3

					# Upgrade buildings
					flowcontainer = {
						name = "buildings_grid"
						datamodel = "[HoldingView.GetBuildings]"
						ignoreinvisible = yes
						spacing = 3
						margin_right = 3
						righttoleft = yes

						item = {
							widget_building_item = {}
						}
					}

					flowcontainer = {
						visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
						spacing = 3
						ignoreinvisible = yes

						widget_building_item = {
							name = "duchy_capital_building"
							datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
							visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_duchy_capital.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}

						widget_building_item = {
							name = "special_building"
							datacontext = "[HoldingView.GetGUISpecialBuilding]"
							visible = "[HoldingView.HasSpecialBuildingSlot]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_special_building.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}

						widget = {
							# This is needed to offset the building slots correctly when special building slots exist.
							name = "Conditional_margin_widget"
							size = { 0 0 }
							visible = "[HoldingView.HasSpecialBuildingSlot]"
						}
					}
				}
			}				
				
				# DEMD Overview (Provinces) Tab (the default tab)
				flowcontainer = {
					parentanchor = top|right
					ignoreinvisible = yes
					#direction = vertical
					#margin_left = 800
					spacing = 4
					min_width = 70
					margin_top = 20
					margin_right = -10
					visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' )]"
					enabled = "[GetVariableSystem.HasValue( 'demd_county_view', 'overview_tab' )]"
					#texture = "gfx/interface/component_masks/mask_frame.dds"
					
					
					flowcontainer = {
						parentanchor = top
						margin_right = 12
						margin_top = -22
						icon = {
							name = "terrain"
							datacontext = "[HoldingView.GetProvince.GetTerrain]"
							texture = "[Terrain.GetIcon]"
							size = { 60 60 }
							tooltip = "HOLDING_TERRAIN_TOOLTIP"
							parentanchor = hcenter
						}	
					}
					flowcontainer = {
						direction = vertical
						spacing = 7
						
						flowcontainer = {
							min_width = 200
							margin_top = -20
							direction = vertical
							spacing = 5
							background = {
								using = Background_Area_Dark
								alpha = 1
								margin_bottom = 3
								margin_left = 8
								margin_right = 8
								margin_top = 22
								
							}
							text_single = {
								parentanchor = hcenter
								text = "#bold Income #!"
								default_format = "#high"
								#fontsize = 20
							}
							
							spacer = { size = { 5 0 } }
							# demographic info
							flowcontainer = {
								spacing = 3
								parentanchor = hcenter
								flowcontainer = {							
									icon = {
										name = "icon_demd_gold"
										texture = "gfx/interface/icons/demd/resources/gold.dds"
										size = { 25 25 }
										tooltip = "[Province.GetCountyCapitalProvince.GetHolding.GetTaxTooltip]"
									}
                                    background = {
                                        visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
                                        using = Status_Bad
                                    }
									text_single = {
										text = "[Province.GetHolding.GetIncome|2]"
										default_format = "#V"
										tooltipwidget = { 
                                            tax_breakdown_widget = { 
                                            
                                            } 
                                        }
									}									
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        manpower_breakdown_widget = { 
                                        
                                        } 
                                    }
                                    background = {
                                        visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
                                        using = Status_Bad
                                    }
									icon = {
										name = "icon_demd_supply"
										texture = "gfx/interface/icons/demd/jobs/guardsman.dds"
										size = { 25 25 }
									}
									text_single = {
										text = "[Province.MakeScope.Var('manpower').GetValue|k]"
										default_format = "#high"
									}
								}								
							}
						}
						spacer = { size = { 0 4 } }
						flowcontainer = {
							direction = vertical
							spacing = 4
							background = {
								using = Background_Area_Dark
								alpha = 1
								margin_bottom = 3
								margin_left = 8
								margin_right = 8
								margin_top = 3
								
							}
							text_single = {
								parentanchor = hcenter
								text = "#bold Rural Population #!"
								default_format = "#high"
								#fontsize = 20
							}
							spacer = { size = { 0 3 } }
							flowcontainer = {
								parentanchor = hcenter
								flowcontainer = {
									tooltipwidget = { 
                                        population_province_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_population"
										texture = "gfx/interface/icons/demd/jobs/clerk.png"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.MakeScope.Var('population').GetValue|1]k"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        growth_province_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_growth"
										texture = "gfx/interface/icons/message_feed/council.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.MakeScope.ScriptValue('growth_rate_display')|%1]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        migration_province_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_migration"
										texture = "gfx/interface/icons/message_feed/guest.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.MakeScope.Var('internal_migration_growth_percent').GetValue|%1]"
										default_format = "#high"
									}	
								}
							}											
							divider_light = { size = { 100% 3 } parentanchor = hcenter }
							text_single = {
								parentanchor = hcenter
								text = "#bold Industry #!"
								default_format = "#high"
							}
							flowcontainer = {
								parentanchor = hcenter
								flowcontainer = {
									tooltipwidget = { 
                                        food_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_food"
										texture = "gfx/interface/icons/demd/resources/food.png"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.MakeScope.Var('food_ratio').GetValue|%0]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }	
								flowcontainer = {
									tooltipwidget = { 
                                        goods_province_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_goods"
										texture = "gfx/interface/icons/demd/resources/goods.png"
										size = { 25 25 }
									}
									text_single = {
										text = "+[Province.MakeScope.Var('capital_production_multiplier').GetValue|%0]"
										default_format = "#high"
									}
								}	
								spacer = { size = { 5 0 } }	
								flowcontainer = {
									tooltipwidget = { 
                                        knight_capacity_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_goods"
										texture = "gfx/interface/icons/demd/resources/knight_capacity.dds"
										size = { 25 25 }
									}
									text_single = {
										text = "[Province.MakeScope.Var('knight_capacity_produced').GetValue|2]"
										default_format = "#high"
									}
								}								
							}
						}
						spacer = { size = { 0 4 } }
						flowcontainer = {
							visible = "[Holding.GetProvince.GetTitle.IsCountyCapital]"
							#margin_top = -20
							direction = vertical
							spacing = 4
							background = {
								using = Background_Area_Dark
								alpha = 1
								margin_bottom = 15
								margin_left = 8
								margin_right = 8
								#margin_top = 30
								
							}
							text_single = {
								parentanchor = hcenter
								text = "#bold Urban Population #!"
								default_format = "#high"
								#fontsize = 20
							}
							spacer = { size = { 0 3 } }
							flowcontainer = {
								parentanchor = hcenter
								flowcontainer = {
									tooltipwidget = { 
                                        population_county_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_population"
										texture = "gfx/interface/icons/demd/jobs/clerk.png"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.Var('population').GetValue|1]k"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        growth_county_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_growth"
										texture = "gfx/interface/icons/message_feed/council.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.ScriptValue('growth_rate_display')|%1]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        migration_county_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										#tooltip = "[demd_migration_pull|E]"
										name = "icon_demd_migration"
										texture = "gfx/interface/icons/message_feed/guest.dds"
										size = { 25 25 }
									}
									text_single = {
										#tooltip = "[demd_migration_pull|E]"
										text = " [Province.GetCounty.GetTitle.MakeScope.ScriptValue('total_migration_growth_percent')|%1]"
										default_format = "#high"
									}	
								}
							}
							divider_light = { size = { 100% 3 } }							
							text_single = {
								parentanchor = hcenter
								text = "#bold Industry #!"
								default_format = "#high"
							}
							flowcontainer = {
								parentanchor = hcenter
								flowcontainer = {
									tooltipwidget = { 
                                        food_county_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_food"
										texture = "gfx/interface/icons/demd/resources/food.png"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.Var('food_ratio').GetValue|%0]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        goods_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_goods"
										texture = "gfx/interface/icons/demd/resources/goods.png"
										size = { 25 25 }
									}
									text_single = {
										text = " +[Province.GetCounty.GetTitle.MakeScope.Var('capital_production_multiplier').GetValue|0%]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        trade_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_demd_trade_value"
										texture = "gfx/interface/icons/demd/resources/trade_resources/trade_value.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.Var('trade_value').GetValue|1]"
										default_format = "#high"
									}
								}
							}
							divider_light = { size = { 100% 3 } parentanchor = hcenter }
							text_single = {
								parentanchor = hcenter
								text = "#bold Status #!"
								default_format = "#high"
								#fontsize = 20
							}
							flowcontainer = {
								parentanchor = hcenter
								flowcontainer = {
									tooltipwidget = { 
                                        sanitation_target_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_sanitation"
										texture = "gfx/interface/icons/demd/resources/sanitation.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.Var('sanitation').GetValue|%0]"
										default_format = "#high"
									}
								}
								spacer = { size = { 5 0 } }
								flowcontainer = {
									tooltipwidget = { 
                                        public_order_target_breakdown_widget = { 
                                        
                                        } 
                                    }
									icon = {
										name = "icon_public_order"
										texture = "gfx/interface/icons/demd/resources/public_order.dds"
										size = { 25 25 }
									}
									text_single = {
										text = " [Province.GetCounty.GetTitle.MakeScope.Var('public_order').GetValue|%0]"
										default_format = "#high"
									}
								}								
							}
							
							
							
							
														
						}
					}
						
						

					expand = {}
				}
			
				# DEMD Law Tab (where the tax options live)
				flowcontainer = {
					name = "law"
					parentanchor = hcenter|vcenter
					
					spacing = 4
					min_width = 50
					#parentanchor = top|right
					#ignoreinvisible = yes
					visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'law_tab' )]"
					enabled = "[GetVariableSystem.HasValue( 'demd_county_view', 'law_tab' )]"
					#texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					#margin_top = -10
					using = Background_Letter

					# legal options
					flowcontainer = {
						direction = vertical
						
						spacing = 50
						
						# tax options
						flowcontainer = {
							margin_top = 30
							margin_bottom = 45
							margin_left = 40
							margin_right = 40
							
							spacing = 25
							
														
							# Taxes
							flowcontainer = {
								direction = vertical
								#min_width = 50
								spacing = 10
								flowcontainer = {
									parentanchor = hcenter
									text_single = {
										text = "Taxes"
										using = Font_Size_Medium
										default_format = "#light_background"
									}
								}
								
								# Tax
								flowcontainer = {									
									# Exempt										
									button_letter = {
										tooltip = DEMD_TAX_0_TOOLTIP
										datacontext = "[HoldingView.GetProvince]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_tax_rate_0').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										size = { 100 35 }
										text_single = {
											text = "Minimal"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										onclick = "[GetScriptedGui('demd_set_tax_rate_0').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)0')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)0')]"

											using = Mask_Rough_Edges
										}
									}																	
									# Low
									button_letter = {
										tooltip = DEMD_TAX_1_TOOLTIP
										size = { 100 35 }
										datacontext = "[HoldingView.GetProvince]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_tax_rate_1').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "Low"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										onclick = "[GetScriptedGui('demd_set_tax_rate_1').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)1')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)1')]"

											using = Mask_Rough_Edges
										}
									}									
									# Medium
									button_letter = {
										tooltip = DEMD_TAX_2_TOOLTIP
										size = { 100 35 }
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_tax_rate_2').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "Medium"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_tax_rate_2').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)2')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)2')]"

											using = Mask_Rough_Edges
										}
									}
									# High
									button_letter = {
										tooltip = DEMD_TAX_3_TOOLTIP
										size = { 100 35 }
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_tax_rate_3').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "High"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_tax_rate_3').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)3')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)3')]"

											using = Mask_Rough_Edges
										}
									}
									# Extortionate
									button_letter = {
										tooltip = DEMD_TAX_4_TOOLTIP
										size = { 100 35 }

										text_single = {
											text = "Extortionate"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_tax_rate_4').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_tax_rate_4').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)4')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('tax_rate').GetValue, '(CFixedPoint)4')]"

											using = Mask_Rough_Edges
										}
									}
								}																								

								
								
								flowcontainer = {
									parentanchor = hcenter
									text_single = {
										text = "Manpower"
										using = Font_Size_Medium
										default_format = "#light_background"
									}
								}
								

								# Manpower
								flowcontainer = {									
									# Exempt										
									button_letter = {
										tooltip = DEMD_MANPOWER_0_TOOLTIP
										datacontext = "[HoldingView.GetProvince]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_manpower_0').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										size = { 100 35 }
										text_single = {
											text = "Minimal"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										onclick = "[GetScriptedGui('demd_set_manpower_0').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)0')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)0')]"

											using = Mask_Rough_Edges
										}
									}																	
									# Low
									button_letter = {
										tooltip = DEMD_MANPOWER_1_TOOLTIP
										size = { 100 35 }
										datacontext = "[HoldingView.GetProvince]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_manpower_1').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "Low"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										onclick = "[GetScriptedGui('demd_set_manpower_1').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)1')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)1')]"

											using = Mask_Rough_Edges
										}
									}									
									# Medium
									button_letter = {
										tooltip = DEMD_MANPOWER_2_TOOLTIP
										size = { 100 35 }
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_manpower_2').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "Moderate"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_manpower_2').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)2')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)2')]"

											using = Mask_Rough_Edges
										}
									}
									# High
									button_letter = {
										tooltip = DEMD_MANPOWER_3_TOOLTIP
										size = { 100 35 }
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_manpower_3').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										text_single = {
											text = "High"
											#visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_manpower_3').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)3')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)3')]"

											using = Mask_Rough_Edges
										}
									}
									# Extortionate
									button_letter = {
										tooltip = DEMD_MANPOWER_4_TOOLTIP
										size = { 100 35 }

										text_single = {
											text = "Extortionate"
											default_format = "#light_background"
											parentanchor = center
											position = {0 -3 }
										}
										
										onclick = "[GetScriptedGui('demd_set_manpower_4').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
										enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('demd_set_manpower_4').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
										background = {
											using = Background_Area_Dark
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)4')]"
										}
										icon = {
											parentanchor = top|hcenter
											position = { 0 -5 }
											texture = "gfx/interface/buttons/button_tree_expand.dds"
											framesize = { 36 36 }
											size = { 24 24 }
											frame = 2
											tintcolor = { 0.4 0.4 0.5 0.7 }
											visible = "[EqualTo_CFixedPoint( Province.GetCounty.GetTitle.MakeScope.Var('manpower_rate').GetValue, '(CFixedPoint)4')]"

											using = Mask_Rough_Edges
										}
									}
								}
							}									
						}
					}
				}
				
                # DEMD Excavation Tab
                flowcontainer = {
					name = "excavation"
					parentanchor = hcenter
					
					spacing = 4
					# min_width = 70
					#parentanchor = top|right
					#ignoreinvisible = yes
					visible = "[GetVariableSystem.HasValue( 'demd_county_view', 'excavation_tab' )]"
					enabled = "[GetVariableSystem.HasValue( 'demd_county_view', 'excavation_tab' )]"
					#texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					margin_top = 25
					margin_bottom = 25
					margin_left = 30
					margin_right = 30
					
	
					
					using = Background_Letter

					flowcontainer = {
						direction = vertical
				

						icon = {
							size = { 680 380 }
							background = {
								texture = "gfx/interface/component_tiles/tile_frame_subwindow_01.dds"
								spriteType = Corneredtiled
								spriteborder = { 20 20 }
								margin = { 7 7 }
								mirror = horizontal							
							}
							text_single = { #icon
								parentanchor = hcenter|vcenter
								size = { 100% 100% }
								text="[Province.GetCounty.GetTitle.Custom('get_ruins_backdrop')]" 
								default_format = "#SIZE:100"
							}
							
							flowcontainer = {
								parentanchor = center
								visible = "[GetScriptedGui('show_excavation_start_button').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End)]"
								button_primary_big = {
									name = "start_excavation"
									size = { 200 40 }
									layoutpolicy_horizontal = expanding
									onclick = "[GetScriptedGui('start_excavation').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
									enabled = "[And(EqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID,GetPlayer.GetID),GetScriptedGui('start_excavation').IsValid( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End))]"
									text = button_start_excavation
									tooltip = DEMD_START_EXCAVATION
								
								}
							}
							flowcontainer = {
								direction = vertical
								parentanchor = center
								visible = "[GetScriptedGui('show_excavation_progress_bar').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End)]"
								
									
								background = {
									using = Background_Area_Dark
									alpha = 1
									margin_bottom = 20
									margin_top = 20
									margin_left = 40
									margin_right = 40
								}
								spacing = 7
								
								flowcontainer = {
									parentanchor = hcenter
									
									text_single = {		
										margin_left = 0
										text = ruins_display_name
										default_format = "#high"
										fontsize = 25
										
									}
								}
								
								progressbar_standard = {
									parentanchor = hcenter
									tooltip = EXCAVATION_BAR_TOOLTIP
									
									name = "excavation_progress"
									size = { 420 30 }
									layoutpolicy_horizontal = expanding
									value = "[FixedPointToFloat(Province.GetCounty.GetTitle.MakeScope.ScriptValue('excavation_stage_progress_display'))]"
									max = "[FixedPointToFloat(Province.GetCounty.GetTitle.MakeScope.ScriptValue('excavation_stage_progress_max_display'))]"
								}
								
								
								flowcontainer = {
									flowcontainer = {
										spacing = 5
										
										flowcontainer = {
											direction = vertical
											portrait_head = {
												#visible = "[GetScriptedGui('show_excavation_leader_head').IsShown( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End)]"
												datacontext = "[Province.GetCounty.GetTitle.MakeScope.Var('active_excavation').Story.MakeScope.Var('excavation_leader').GetCharacter]"
												size = { 98 120 }
												background = {
													using = Background_Area_Solid
												}
											}
											button_standard = {
												parentanchor = hcenter
												size = { 90 30 }
												tooltip = EXCAVATION_REMOVE_LEADER_TOOLTIP
												text = button_replace_excavation_leader
												onclick = "[GetScriptedGui('remove_excavation_leader').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
												onclick = "[GetVariableSystem.Toggle( 'window_assign_excavation_leader' )]"
												onclick = "[GetScriptedGui('get_excavation_leader_candidates').Execute( GuiScope.SetRoot( Province.GetCounty.GetTitle.MakeScope ).End ) ]"
												background = {
													using = Background_Area_Solid
												}
											}
										}
										
										flowcontainer = {
											parentanchor = top
											#direction = vertical
											spacing = 50
											min_width = 180
											margin_left = 10
											margin_top = 0
											
											flowcontainer = {
												direction = vertical
												
												text_single = {		
													#margin_left = 0
													text = title_excavation_stage
													default_format = "#high"
													fontsize = 20												
												}
												
												text_single = {		
													#margin_left = 0
													text = title_excavation_quality
													default_format = "#high"
													fontsize = 20												
												}
												
												text_single = {		
													#margin_left = 0
													text = title_excavation_minor_artifacts
													default_format = "#high"
													fontsize = 20												
												}
																																		
												text_single = {		
													#margin_left = 0
													text = title_excavation_breakthrough_chance
													default_format = "#high"
													fontsize = 20												
												}

											}
											
											flowcontainer = {
												direction = vertical
												parentanchor = right
												
												text_single = {		
													#margin_left = 0
													parentanchor = right
													text = display_excavation_stage
													default_format = "#high"
													fontsize = 20												
												}
												
												text_single = {		
													#margin_left = 0
													parentanchor = right
													text = display_excavation_quality
													default_format = "#high"
													fontsize = 20												
												}
												
												text_single = {		
													#margin_left = 0
													parentanchor = right
													text = display_excavation_minor_artifacts
													default_format = "#high"
													fontsize = 20												
												}
																																		
												text_single = {		
													#margin_left = 0
													parentanchor = right
													text = display_excavation_breakthrough_chance
													default_format = "#high"
													fontsize = 20												
												}
											}											
										}
									}
								}
							}
								
						}																		
					}
				}
		
            
		}
	}
}

######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################

window = {
	name = "holding_tracks_view"
	size = { 100% 100% }
	movable = no
	layer = windows_layer

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 165
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}

	alwaystransparent = yes

	hbox = {
		expand = {
			max_width = 610
		}

		widget = {
			layoutpolicy_vertical = expanding
			size = { 670 0 }

			vbox = {
				margin_top = 170
				margin_bottom = 10

				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 700 }

					## New Building
					vbox = {
						visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 3 3 }
						margin_bottom = 5
						using = Window_Background_Subwindow

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[HoldingView.GetTracksViewLabel]"
							}

							blockoverride "button_close"
							{
								onclick = "[HoldingView.CloseSubwindows]"
							}
						}

						building_in_vassal_warning_hbox = {}

						text_single = {
							layoutpolicy_horizontal = shrinking
							name = "prompt"
							text = "[HoldingView.GetTracksViewPrompt]"
							margin_bottom = 10
						}

						text_single = {
							layoutpolicy_horizontal = shrinking
							visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
							name = "no_potential_buildings_text"
							text = "NO_POTENTIAL_BUILDINGS_WARNING"
							margin_bottom = 10
						}

						## Construct New Building
						container = {
							layoutpolicy_vertical = expanding
							visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"

							scrollbox = {
								visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
								size = { 700 300 }
								autoresizescrollarea = yes
								maximumsize = { -1 800 }

								blockoverride "scrollbox_content"
								{
									name = "tracks_grid"
									datamodel = "[HoldingView.GetPotentialBuildings]"
									visible = "[HoldingView.IsSelectingNewBuilding]"
									layoutpolicy_horizontal = expanding
									spacing = 10
									set_parent_size_to_minimum = yes

									block "scrollbox_margins"
									{
										using = Scrollbox_Margins
										margin_right = 15
										margin_top = 5
									}

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											background = {
												using = Background_Area_Light
											}

											hbox = {
												name = "header"
												layoutpolicy_horizontal = expanding

												background = {
													using = Background_Area
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 10 }
													spacing = 10

													icon_building = {
														name = "building_icon"
														size = { 75 65 }
														texture = "[GUIPotentialBuildingItem.GetBuilding.GetTypeIcon]"
													}

													vbox = {
														spacing = 5
														layoutpolicy_horizontal = expanding
														
														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]"
															using = Font_Size_Medium
															align = left
															autoresize = no
														}

														hbox = {
															button_standard_small = {
																text = "CONSTRUCT_BUILDINGS_DETAILS"

																onclick = "[GUIPotentialBuildingItem.ShowDetails]"
																tooltip = "CONSTRUCT_BUILDINGS_DETAILS_TT"
																using = tooltip_es
															}

															expand = {}
														}
													}

													expand = {}

													hbox = {
														spacing = 5

														hbox = {
															margin = { 5 5 }
															min_width = 120
															spacing = 10

															background = {
																using = Background_Area
																margin = { 0 2 }
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
																visible = "[GUIPotentialBuildingItem.HasGoldCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
																visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
																visible = "[GUIPotentialBuildingItem.HasPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															expand = {}
														}

														button_standard = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
															size = { 100 53 }
															enabled = "[GUIPotentialBuildingItem.CanConstruct]"
															tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
															onclick = "[GUIPotentialBuildingItem.Construct]"
															text = "CONSTRUCT"
															using = tooltip_es
														}
													}
												}
											}

											hbox = {
												name = "dynamic_content"
												layoutpolicy_horizontal = expanding
												margin = {5 5}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = {5 0}
													text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
													default_format = "#F"
													autoresize = yes
													max_width = 280
													min_width = 280
												}

												vbox = {
													spacing = 8

													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 10

														text_label_left = {
															layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
															text = CV_BUILDING_LEVEL_AND_NAME
															autoresize = no
														}
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 330
														min_width = 330
														text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescription]"
														margin = { 15 10 }

														background = {
															using = Background_Frame
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						vbox = {
							visible = "[HoldingView.IsSelectingBuildingToConstruct]"
							layoutpolicy_horizontal = expanding
							alwaystransparent = no

							## Upgrade Building
							vbox = {
								name = "upgrade"
								datacontext = "[HoldingView.GetTrack]"
								layoutpolicy_horizontal = expanding
								#minimumsize = { 0 700 }
								using = Window_Background_Subwindow
								margin_bottom = 10

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 15 10 }
									spacing = 10

									background = {
										using = Background_Area
									}

									icon_building = {
										name = "building_icon"
										texture = "[GUITrackItem.GetSelectedBuilding.GetTypeIcon]"
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetSelectedBuilding.GetTypeName]"
											using = Font_Size_Big
											default_format = "#high"
										}

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetBuildingTypeText]"
										}

										building_in_vassal_warning_hbox = {
										}
									}

									buttons_window_control = {
										blockoverride "button_close"
										{
											onclick = "[HoldingView.CloseSubwindows]"
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 15 5 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 5 10 }

										### PREVIOUS BUILDINGS
										hbox = {
											name = "level_track_previous"
											datamodel = "[GUITrackItem.GetPreLevelItems]"

											item = {
												hbox = {
													button_icon = {
														name = "track_icon"
														onclick = "[BuildingLevelItem.OnClick]"
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"

														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"

														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														background = {
															texture = "gfx/interface/window_county/building_status_circle.dds"
															framesize = { 120 120 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 3
															}
														}

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}

													widget = {
														visible = "[GUITrackItem.HasCurrentBuilding]"
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }

															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}
												}
											}
										}

										### CURRENT BUILDING
										button_icon = {
											name = "current_building"
											visible = "[GUITrackItem.HasCurrentBuilding]"
											onclick = "[GUITrackItem.OnCurrentBuildingClick]"
											down = "[GUITrackItem.IsCurrentBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsCurrentBuildingSelected]"
											tooltip = "[GUITrackItem.GetCurrentBuildingTooltip]"
											using = tooltip_ws
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 3
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsCurrentBuildingSelected]"
												texture = "[GUITrackItem.GetCurrentLevelIcon]"
											}

											icon = {
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										expand = {
											visible = "[Not(And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding))]"
										}

										widget = {
											visible = "[And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding)]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										### NEXT BUILDING
										button_icon = {
											name = "next_building"
											visible = "[GUITrackItem.HasNextBuilding]"
											down = "[GUITrackItem.IsNextBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsNextBuildingSelected]"
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											onclick = "[GUITrackItem.OnNextBuildingClick]"
											tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												visible = "[GUITrackItem.IsConstructing]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												frame = 2
												alpha = 0.5
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 4
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsNextBuildingSelected]"
												alwaystransparent = yes
												texture = "[GUITrackItem.GetNextLevelIcon]"
												#frame = "[GUITrackItem.GetNextLevelIconFrame]"
											}

											icon = {
												visible = "[GUITrackItem.IsNextBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										widget = {
											visible = "[Not(IsDataModelEmpty( GUITrackItem.GetPostLevelItems ))]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										#Post Track
										### LEVEL TRACK
										hbox = {
											name = "level_track_next"
											datamodel = "[GUITrackItem.GetPostLevelItems]"

											item = {
												hbox = {
													widget = {
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}

													button_icon = {
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"
														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"
														onclick = "[BuildingLevelItem.OnClick]"
														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
															#frame = 2
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}
												}
											}
										}
									}

									spacer = {
										size = { 10 10 }
									}

									# Buliding info
									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Frame
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 5
											margin_left = 15

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "[GUITrackItem.GetSelectedBuilding.GetNameNoTooltip]"
												default_format = "#high"
												using = Font_Size_Medium
											}
										}

										hbox = {
											name = "flavor_and_effect"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 5 5 }

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 10 5 }
													autoresize = yes
													max_width = 330
													min_width = 330
													text = "[GUITrackItem.GetSelectedBuilding.GetDescription]"
												}

												hbox = {
													visible = "[And(And(GUITrackItem.CanReplaceOrCancel, GUITrackItem.IsCurrentBuildingSelected), Not(GUITrackItem.IsConstructing))]"
													spacing = 10
													margin_bottom = 5

													text_single = {
														text = "CURRENT_BUILDING"
														default_format = "#weak"
														align = nobaseline
													}
												}

												vbox = {
													visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_bottom = 5
													spacing = 5

													text_label_left = {
														layoutpolicy_horizontal = expanding
														text = "UPGRADE_COST"
													}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 10
														margin = { 10 10 }

														hbox = {
															spacing = 10

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedGoldCost]"
																visible = "[GUITrackItem.HasSelectedGoldCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
																visible = "[GUITrackItem.HasSelectedPrestigeCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPietyCost]"
																visible = "[GUITrackItem.HasSelectedPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
														}

														icon = {
															name = "cant_construct"
															size = { 30 30 }
															texture = "gfx/interface/icons/symbols/icon_warning.dds"
															tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
															visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
														}

														expand = {}
													}
												}

											}

											divider_light = {
												layoutpolicy_vertical = expanding
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = yes
												max_width = 280
												min_width = 280
												text = "[GUITrackItem.GetSelectedBuilding.GetEffectDescription]"
												margin = { 15 10 }
											}
										}
									}

									vbox = {
										visible = "[GUITrackItem.IsConstructing]"
										layoutpolicy_horizontal = expanding
										margin = { 0 15 }
										spacing = 10

										text_single = {
											text = "HOLDING_VIEW_IN_PROGRESS"
											margin = { 0 5 }
										}

										hbox = {
											spacing = 10

											hbox = {
												widget = {
													size = { 20 20 }

													button_round  = {
														name = "abort_button"
														parentanchor = center
														visible = "[GUITrackItem.CanShowReplaceOrCancel]"
														enabled = "[GUITrackItem.CanReplaceOrCancel]"
														onclick = "[GUITrackItem.ReplaceOrCancel]"
														tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"

														button_cancel = {
															parentanchor = center
															alwaystransparent = yes
														}
													}
												}
											}

											progressbar_standard = {
												name = "construct_progressbar"
												layoutpolicy_horizontal = expanding
												layoutstretchfactor_horizontal = 1
												size = { 300 25 }
												alwaystransparent = yes
												value = "[GUITrackItem.GetConstructionProgress]"

												text_single = {
													parentanchor = center
													text = "[GUITrackItem.GetConstructTimeLeft]"
													default_format = "#high"
													align = nobaseline
												}
											}
										}
									}

									spacing = 5

									hbox = {
										visible = "[Not(GUITrackItem.IsConstructing)]"
										spacing = 10
										# layoutpolicy_horizontal = expanding
										margin = { 10 10 }
										vbox = {
											layoutpolicy_vertical = expanding
											expand = {}
											margin_bottom = 7

											button_standard = {
												name = "back_button"
												text = "BACK_LABEL"
												visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'), Not(GUITrackItem.IsConstructing))]"
												onclick = "[GUITrackItem.GoBack]"
												oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
												clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
											}

											button_round = {
												name = "replace_button"
												onclick = "[GUITrackItem.ReplaceOrCancel]"
												tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"

												button_change = {
													alwaystransparent = yes
													parentanchor = center
												}
											}
										}
										vbox = {
											hbox = {
												visible = "[GUITrackItem.HasNextBuilding]"
												layoutpolicy_horizontal = expanding

												hbox = {
													margin = { 10 5 }
													margin_right = 15
													spacing = 10

													background = {
														using = Background_Area
														margin = { 0 2 }
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextGoldCost]"
														visible = "[GUITrackItem.HasNextGoldCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextPrestigeCost]"
														visible = "[GUITrackItem.HasNextPrestigeCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}


													hbox = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextPietyCost]"
														visible = "[GUITrackItem.HasNextPietyCost]"

														text_single = {
															text = "[ValueBreakdown.GetValue]"
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = {}
															}
														}

														text_single = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
															text = "@warning_icon!"
														}

														expand = {}
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextConstructionTime]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
													}
												}
											}

											button_primary = {
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												size = { 250 53 }
												onclick = "[GUITrackItem.OnClick]"
												tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
												enabled = "[GUITrackItem.CanConstructNextBuilding]"
												visible = "[GUITrackItem.HasNextBuilding]"
												text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel, '(int32)1'),'CONSTRUCT','UPGRADE')]"
												using = Font_Size_Medium
											}

										}
									}
								}
							}
						}

						expand = {}
					}

					expand = {}
				}
			}
		}

		expand = {}
	}
}

######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################

window = {
	name = "holding_type_selection_view"
	movable = no
	layer = windows_layer
	parentanchor = bottom|hcenter
	position = { 70 -50 }
	using = Window_Background_Popup

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 20 20 }
		spacing = 15

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING"
			}

			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}

		building_in_vassal_warning_hbox = {}

		hbox = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			spacing = 10

			item = {
				vbox = {
					spacing = 5

					button_standard = {
						size = { 250 150 }
						enabled = "[HoldingTypeItem.CanConstructBuilding]"
						onclick = "[HoldingTypeItem.OnClick]"
						tooltip = "[HoldingTypeItem.GetTooltip]"
						datacontext = "[HoldingTypeItem.GetProvince]"

						highlight_icon = {
							size = { 100% 100% }
							gfxtype = framedbuttongfx
							texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
						}

						flowcontainer = {
							parentanchor = bottom|right
							ignoreinvisible = yes
							margin = { 5 5 }

							icon = {
								name = "wrong_type"
								visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
								size = { 35 35 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								tooltip = HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE
							}
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingTypeItem.GetHoldingType.GetName]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CountyViewTypes
{
	type widget_building_item = widget {
		parentanchor = bottom
		size = { 55 55 }
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne

		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"

			highlight_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/symbols/icon_plus.dds"
			}

			icon_building = {
				name = "building_icon"
				visible = "[Not(And( And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), GUIBuildingItem.HasLevel ))]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[And( And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), GUIBuildingItem.HasLevel )]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			# button_icon_highlight = {
			# 	name = "level_icon"
			# 	parentanchor = bottom|right
			# 	position = { -10 -5 }
			# 	size = { 40 40 }
			# 	scale = 0.4
			# 	framesize = { 55 55 }
			# 	visible = "[GUIBuildingItem.HasLevel]"
			# 	texture = "[GUIBuildingItem.GetLevelTexture]"
			# 	frame = "[GUIBuildingItem.GetLevelFrame]"

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}
			# }

			text_single= {
				visible = "[GUIBuildingItem.HasLevel]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				position = { -6 -3 }
				#using = Font_Type_Flavor
				fontsize = 15
				default_format = "#low;bold"
				align = nobaseline

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
			}

			icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				size = { 25 25 }
				texture = "gfx/interface/icons/symbols/icon_warning.dds"
			}
		}

		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}

		progressbar_standard = {
			name = "construct_progressbar"
			visible = "[GUIBuildingItem.IsConstructing]"
			parentanchor = bottom
			position = { 0 8 }
			alwaystransparent = yes
			size = { 100% 10 }
			value = "[GUIBuildingItem.GetConstructingProgress]"
			direction = horizontal
			tooltip = "[GUIBuildingItem.GetTooltip]"
		}
	}

	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not( ObjectsEqual( HoldingView.GetHolder, GetPlayer ) )]"

		coa_title_tiny = {
			datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		}

		text_multi = {
			autoresize = yes
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
		}
	}
}

